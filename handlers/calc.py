import json
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

router = Router()
PRO_USERS_FILE = "pro_users.json"

class CalcStates(StatesGroup):
    buying = State()
    selling = State()
    volume = State()
    commission = State()

def is_pro(user_id: int) -> bool:
    try:
        with open(PRO_USERS_FILE, "r") as f:
            data = json.load(f)
        return str(user_id) in data.get("users", [])
    except:
        return False

@router.message(F.text == "/calc")
async def start_calc(message: Message, state: FSMContext):
    if not is_pro(message.chat.id):
        await message.answer(
            "üîí –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è <b>PRO</b>-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
            "üíé –ü–æ–¥–∫–ª—é—á–∏—Ç–µ PRO, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.",
            parse_mode="HTML"
        )
        return
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ (‚Ç¥):")
    await state.set_state(CalcStates.buying)

@router.message(CalcStates.buying)
async def set_buy(message: Message, state: FSMContext):
    try:
        await state.update_data(buy=float(message.text))
        await message.answer("üìà –í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ (‚Ç¥):")
        await state.set_state(CalcStates.selling)
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 41.00):")

@router.message(CalcStates.selling)
async def set_sell(message: Message, state: FSMContext):
    try:
        await state.update_data(sell=float(message.text))
        await message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º —Å–¥–µ–ª–∫–∏ ($):")
        await state.set_state(CalcStates.volume)
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 43.00):")

@router.message(CalcStates.volume)
async def set_volume(message: Message, state: FSMContext):
    try:
        await state.update_data(volume=float(message.text))
        await message.answer("üí∏ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é (%), –µ—Å–ª–∏ –µ—Å—Ç—å (0 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):")
        await state.set_state(CalcStates.commission)
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100):")

@router.message(CalcStates.commission)
async def calc_profit(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        buy = data["buy"]
        sell = data["sell"]
        volume = data["volume"]
        commission_percent = float(message.text)

        cost = buy * volume
        gain = sell * volume
        commission = gain * commission_percent / 100
        profit = gain - cost - commission
        profit_pct = ((profit / cost) * 100) if cost else 0

        await message.answer(
            f"üíπ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
            f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {cost:.2f} ‚Ç¥\n"
            f"–ü–æ–ª—É—á–µ–Ω–æ: {gain:.2f} ‚Ç¥\n"
            f"–ö–æ–º–∏—Å—Å–∏—è: {commission:.2f} ‚Ç¥\n"
            f"üìä –ü—Ä–∏–±—ã–ª—å: {profit:.2f} ‚Ç¥ ({profit_pct:.2f}%)",
            parse_mode="HTML"
        )
        await state.clear()
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

from aiogram import Router, types
from aiogram.filters.command import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from config.db import AsyncSessionLocal
from models.user_setting import UserSetting

router = Router()

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ Free –≤–µ—Ä—Å–∏–∏
class FreeCalcState(StatesGroup):
    calc = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –≤—ã–±–æ—Ä –≤–µ—Ä—Å–∏–∏
def version_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜì Free Version", callback_data="version:free")],
        [InlineKeyboardButton(text="üíé Pro Version", callback_data="version:pro")],
    ])

# –ú–µ–Ω—é Free –≤–µ—Ä—Å–∏–∏
def free_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="free:settings")],
        [InlineKeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="free:calc")],
        [InlineKeyboardButton(text="üìä Arbitrage", callback_data="free:arbitrage")],
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="version:main")],
    ])

@router.message(Command("start"))
async def cmd_start(message: Message):
    text = (
        "üÜì *Free Version* (–ë–µ—Å–ø–ª–∞—Ç–Ω–æ):\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂–∏ –∏ –ø–æ—Ä–æ–≥–∏ BUY/SELL (–º–∞–∫—Å $100)\n"
        "‚Ä¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏\n\n"
        "üíé *Pro Version* (–ü–ª–∞—Ç–Ω–æ $12.99 USDT):\n"
        "‚Ä¢ –í—Å—ë –∏–∑ Free + –∏—Å—Ç–æ—Ä–∏—è –∏ —Ç–æ–ø-—Å–¥–µ–ª–∫–∏\n"
        "‚Ä¢ –ê—Ä—Ö–∏–≤ —Å–¥–µ–ª–æ–∫ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é –Ω–∏–∂–µ:"   
    )
    await message.answer(text, parse_mode="Markdown", reply_markup=version_menu())

@router.callback_query(lambda c: c.data.startswith("version:"))
async def cb_version(c: CallbackQuery, state: FSMContext):
    action = c.data.split(":")[1]
    if action == "main":
        await c.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é –Ω–∏–∂–µ:", reply_markup=version_menu()
        )
    elif action == "free":
        await c.message.edit_text(
            "üÜì Free Version Menu:", reply_markup=free_menu()
        )
    elif action == "pro":
        await c.answer("Pro –≤–µ—Ä—Å–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!", show_alert=True)
    await c.answer()

# –î–∞–ª—å–Ω–µ–π—à–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã Free –≤–µ—Ä—Å–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏...


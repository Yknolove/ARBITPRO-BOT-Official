from aiogram import Router
from aiogram.filters.command import Command
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from config.db import AsyncSessionLocal
from models.user_setting import UserSetting

router = Router()

# FSM –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤–æ Free –≤–µ—Ä—Å–∏–∏
class FreeCalcState(StatesGroup):
    calc = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –≤—ã–±–æ—Ä –≤–µ—Ä—Å–∏–∏
def version_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜì Free Version", callback_data="version:free")],
        [InlineKeyboardButton(text="üíé Pro Version", callback_data="version:pro")],
    ])

# –ú–µ–Ω—é Free –≤–µ—Ä—Å–∏–∏
def free_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="free:settings")],
        [InlineKeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="free:calc")],
        [InlineKeyboardButton(text="üìä Arbitrage", callback_data="free:arbitrage")],
        [InlineKeyboardButton(text="üîô Back", callback_data="version:main")],
    ])

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ArbitPRO! –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é:", reply_markup=version_menu())

# –í—ã–±–æ—Ä –≤–µ—Ä—Å–∏–∏
@router.callback_query(lambda c: c.data.startswith("version:"))
async def cb_version(c: CallbackQuery, state: FSMContext):
    action = c.data.split(":")[1]
    if action == "main":
        await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é:", reply_markup=version_menu())
    elif action == "free":
        await c.message.edit_text("üÜì Free Version Menu:", reply_markup=free_menu())
    elif action == "pro":
        await c.answer("Pro –≤–µ—Ä—Å–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!", show_alert=True)
    await c.answer()

# –•–µ–Ω–¥–ª–µ—Ä—ã Free –≤–µ—Ä—Å–∏–∏
@router.callback_query(lambda c: c.data.startswith("free:"))
async def cb_free(c: CallbackQuery, state: FSMContext):
    action = c.data.split(":")[1]
    if action == "settings":
        await c.message.edit_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Free –≤–µ—Ä—Å–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)", reply_markup=free_menu())
    elif action == "calc":
        await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ: amount buy_price sell_price\n–ü—Ä–∏–º–µ—Ä: 100 41.20 42.50")
        await state.set_state(FreeCalcState.calc)
    elif action == "arbitrage":
        await c.message.edit_text("üìä Arbitrage Free (–∑–∞–≥–ª—É—à–∫–∞)", reply_markup=free_menu())
    await c.answer()

@router.message(FreeCalcState.calc)
async def process_free_calc(message: Message, state: FSMContext):
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return
    try:
        amt, bp, sp = map(float, parts)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
        return
    profit = amt * (sp - bp)
    await state.clear()
    await message.answer(f"üí∞ –ü—Ä–∏–±—ã–ª—å: {profit:.2f}‚Ç¥", reply_markup=free_menu())

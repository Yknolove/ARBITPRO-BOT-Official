from aiogram import Router, types
from aiogram.filters.command import Command
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from config.db import AsyncSessionLocal
from models.user_setting import UserSetting
from services.aggregator import fetch_current_arbitrage  # –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–ª–∏ stub

router = Router()

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
class SettingsStates(StatesGroup):
    exchange = State()
    buy = State()
    sell = State()

class CalcStates(StatesGroup):
    calc = State()

# –ú–µ–Ω—é
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu:settings"),
         InlineKeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="menu:calc")],
        [InlineKeyboardButton(text="üìä –°–≤—è–∑–∫–∏", callback_data="menu:arbitrage"),
         InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="menu:history")],
        [InlineKeyboardButton(text="üî• –¢–æ–ø", callback_data="menu:top")],
    ])

def settings_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè∑ –ë–∏—Ä–∂–∞", callback_data="settings:exchange"),
         InlineKeyboardButton(text="üìà BUY", callback_data="settings:buy")],
        [InlineKeyboardButton(text="üìâ SELL", callback_data="settings:sell"),
         InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:main")],
    ])

# –î—Ä—É–≥–∏–µ –ø–æ–¥–º–µ–Ω—é
def arbitrage_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="arbitrage:refresh"),
         InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:main")],
    ])

stubs_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:main")]
])

async def get_or_create_setting(session: AsyncSession, user_id: int) -> UserSetting:
    st = await session.get(UserSetting, user_id)
    if not st:
        st = UserSetting(user_id=user_id)
        session.add(st)
        await session.commit()
        await session.refresh(st)
    return st

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ArbitPRO!", reply_markup=main_menu())

@router.callback_query(lambda c: c.data.startswith("menu:"))
async def cb_main(c: CallbackQuery, state: FSMContext):
    action = c.data.split(":")[1]
    if action == "main":
        await c.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    elif action == "settings":
        await c.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=settings_menu())
    elif action == "calc":
        await c.message.edit_text(
            "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä: –≤–≤–µ–¥–∏—Ç–µ amount buy_price sell_price",
            reply_markup=None
        )
        await state.set_state(CalcStates.calc)
    elif action == "arbitrage":
        rates = await fetch_current_arbitrage()
        text = "\n".join(
            f"{exch.title()}: buy {r['buy']} sell {r['sell']}" for exch, r in rates.items()
        )
        await c.message.edit_text(text or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", reply_markup=arbitrage_menu())
    elif action == "history":
        await c.message.edit_text("üìú –ò—Å—Ç–æ—Ä–∏—è: –∑–∞–≥–ª—É—à–∫–∞", reply_markup=stubs_menu)
    elif action == "top":
        await c.message.edit_text("üî• –¢–æ–ø: –∑–∞–≥–ª—É—à–∫–∞", reply_markup=stubs_menu)
    await c.answer()

@router.callback_query(lambda c: c.data.startswith("settings:"))
async def cb_settings(c: CallbackQuery, state: FSMContext):
    action = c.data.split(":")[1]
    if action == "exchange":
        await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –±–∏—Ä–∂—É (binance, bybit, bitget):")
        await state.set_state(SettingsStates.exchange)
    elif action == "buy":
        await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ BUY-–ø–æ—Ä–æ–≥ (—á–∏—Å–ª–æ):")
        await state.set_state(SettingsStates.buy)
    elif action == "sell":
        await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ SELL-–ø–æ—Ä–æ–≥ (—á–∏—Å–ª–æ):")
        await state.set_state(SettingsStates.sell)
    await c.answer()

@router.message(SettingsStates.exchange)
async def process_exchange(message: Message, state: FSMContext):
    exch = message.text.lower()
    if exch not in ("binance","bybit","bitget"):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –±–∏—Ä–∂–∞.")
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
        st.exchange = exch
        await session.commit()
    await state.clear()
    await message.answer(f"‚úÖ –ë–∏—Ä–∂–∞: {exch}", reply_markup=main_menu())

@router.message(SettingsStates.buy)
async def process_buy(message: Message, state: FSMContext):
    try:
        val = float(message.text)
    except:
        return await message.answer("–ù–µ —á–∏—Å–ª–æ.")
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
        st.buy_threshold = val
        await session.commit()
    await state.clear()
    await message.answer(f"‚úÖ BUY ‚â§ {val}", reply_markup=main_menu())

@router.message(SettingsStates.sell)
async def process_sell(message: Message, state: FSMContext):
    try:
        val = float(message.text)
    except:
        return await message.answer("–ù–µ —á–∏—Å–ª–æ.")
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
        st.sell_threshold = val
        await session.commit()
    await state.clear()
    await message.answer(f"‚úÖ SELL ‚â• {val}", reply_markup=main_menu())

@router.message(CalcStates.calc)
async def process_calc(message: Message, state: FSMContext):
    parts = message.text.split()
    if len(parts) != 3:
        return await message.answer("–û—à–∏–±–∫–∞, —Ç—Ä–∏ —á–∏—Å–ª–∞.", reply_markup=main_menu())
    try:
        amt, bp, sp = map(float, parts)
    except:
        return await message.answer("–ù–µ —á–∏—Å–ª–∞.", reply_markup=main_menu())
    profit = amt * (sp - bp)
    await state.clear()
    await message.answer(f"üí∞ –ü—Ä–∏–±—ã–ª—å: {profit:.2f}‚Ç¥", reply_markup=main_menu())

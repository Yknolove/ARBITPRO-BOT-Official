from aiogram import Router, types
from aiogram.filters.command import Command
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from config.db import AsyncSessionLocal
from models.user_setting import UserSetting

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Router, —á—Ç–æ–±—ã main.py –º–æ–≥ –µ–≥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
router = Router()

class FreeSettingsStates(StatesGroup):
    exchange = State()
    buy = State()
    sell = State()
    volume = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –≤—ã–±–æ—Ä –≤–µ—Ä—Å–∏–∏
def version_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜì Free Version", callback_data="version:free")],
        [InlineKeyboardButton(text="üíé Pro Version", callback_data="version:pro")],
    ])

# –ú–µ–Ω—é Free –≤–µ—Ä—Å–∏–∏
def free_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè∑ –ë–∏—Ä–∂–∞", callback_data="free:exchange")],
        [InlineKeyboardButton(text="üìà BUY", callback_data="free:buy")],
        [InlineKeyboardButton(text="üìâ SELL", callback_data="free:sell")],
        [InlineKeyboardButton(text="üî¢ –õ–∏–º–∏—Ç", callback_data="free:volume")],
        [InlineKeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="free:show")],
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="version:main")],
    ])

async def get_or_create_setting(session: AsyncSession, user_id: int) -> UserSetting:
    setting = await session.get(UserSetting, user_id)
    if not setting:
        setting = UserSetting(user_id=user_id)
        session.add(setting)
        await session.commit()
        await session.refresh(setting)
    return setting

@router.message(Command("start"))
async def cmd_start(message: Message):
    text = (
        "üÜì *Free Version* (–ë–µ—Å–ø–ª–∞—Ç–Ω–æ):\n"
        "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏ P2P\n"
        "‚Ä¢ –ü–æ—Ä–æ–≥ BUY –∏ SELL\n"
        "‚Ä¢ –õ–∏–º–∏—Ç –æ–±—ä—ë–º–∞ —Å–¥–µ–ª–∫–∏\n\n"
        "üíé *Pro Version* (—Å–∫–æ—Ä–æ): –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"
    )
    await message.answer(text, parse_mode="Markdown", reply_markup=version_menu())

@router.callback_query(lambda c: c.data.startswith("version:"))
async def cb_version(c: CallbackQuery, state: FSMContext):
    action = c.data.split(":")[1]
    if action == "main":
        await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é:", reply_markup=version_menu())
    elif action == "free":
        await c.message.edit_text("üÜì Free –º–µ–Ω—é:", reply_markup=free_menu())
    else:
        await c.answer("Pro –≤–µ—Ä—Å–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!", show_alert=True)
    await c.answer()

@router.callback_query(lambda c: c.data.startswith("free:"))
async def cb_free(c: CallbackQuery, state: FSMContext):
    action = c.data.split(":")[1]
    if action == "exchange":
        await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –±–∏—Ä–∂—É (binance, bybit, okx, bitget):")
        await state.set_state(FreeSettingsStates.exchange)
    elif action == "buy":
        await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ BUY-–ø–æ—Ä–æ–≥ (—á–∏—Å–ª–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä: 41.20")
        await state.set_state(FreeSettingsStates.buy)
    elif action == "sell":
        await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ SELL-–ø–æ—Ä–æ–≥ (—á–∏—Å–ª–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä: 42.50")
        await state.set_state(FreeSettingsStates.sell)
    elif action == "volume":
        await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –æ–±—ä—ë–º–∞ (—á–∏—Å–ª–æ –¥–æ–ª–ª–∞—Ä–æ–≤)")
        await state.set_state(FreeSettingsStates.volume)
    elif action == "show":
        async with AsyncSessionLocal() as session:
            st = await get_or_create_setting(session, c.from_user.id)
        text = (
            f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Free:\n"
            f"–ë–∏—Ä–∂–∞: {st.exchange}\n"
            f"BUY ‚â§ {st.buy_threshold or '-'}\n"
            f"SELL ‚â• {st.sell_threshold or '-'}\n"
            f"–û–±—ä—ë–º ‚â§ ${st.volume_limit or '-'}"
        )
        await c.message.edit_text(text, reply_markup=free_menu())
    elif action == "main":
        await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é:", reply_markup=version_menu())
    await c.answer()

@router.message(FreeSettingsStates.exchange)
async def process_exchange(message: Message, state: FSMContext):
    exch = message.text.lower()
    if exch not in ("binance","bybit","okx","bitget"):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –±–∏—Ä–∂–∞.")
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
        st.exchange = exch
        await session.commit()
    await state.clear()
    await message.answer(f"‚úÖ –ë–∏—Ä–∂–∞: {exch}", reply_markup=free_menu())

@router.message(FreeSettingsStates.buy)
async def process_buy(message: Message, state: FSMContext):
    try:
        val = float(message.text)
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
        st.buy_threshold = val
        await session.commit()
    await state.clear()
    await message.answer(f"‚úÖ BUY ‚â§ {val}", reply_markup=free_menu())

@router.message(FreeSettingsStates.sell)
async def process_sell(message: Message, state: FSMContext):
    try:
        val = float(message.text)
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
        st.sell_threshold = val
        await session.commit()
    await state.clear()
    await message.answer(f"‚úÖ SELL ‚â• {val}", reply_markup=free_menu())

@router.message(FreeSettingsStates.volume)
async def process_volume(message: Message, state: FSMContext):
    try:
        val = float(message.text)
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
        st.volume_limit = val
        await session.commit()
    await state.clear()
    await message.answer(f"‚úÖ –û–±—ä—ë–º ‚â§ ${val}", reply_markup=free_menu())

from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart

router = Router()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìä –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞", callback_data="arbitrage")],
    [InlineKeyboardButton(text="üìà –ö—É—Ä—Å –≤–∞–ª—é—Ç", callback_data="rates")],
    [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
    [InlineKeyboardButton(text="üíé –ü–µ—Ä–µ–π—Ç–∏ –≤ PRO", callback_data="pro")]
])

# –ö–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
arbitrage_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data="set_filter")],
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
])

# –ù–∞–∑–∞–¥ –∏–∑ –ª—é–±–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
back_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
])

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>ArbitPRO</b> <code>(Free)</code>!

"
        "üîì –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
"
        "‚Ä¢ –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
"
        "‚Ä¢ –ö—É—Ä—Å –≤–∞–ª—é—Ç
"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏

"
        "üîí <b>PRO-—Ñ—É–Ω–∫—Ü–∏–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ):</b>
"
        "‚Ä¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏
"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
"
        "‚Ä¢ –ê—Ä—Ö–∏–≤ —Ç–æ–ø-—Å–¥–µ–ª–æ–∫

"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_menu,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "main_menu")
async def back_to_menu(call: CallbackQuery):
    await call.message.edit_text(
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_menu
    )

@router.callback_query(F.data == "arbitrage")
async def show_arbitrage(call: CallbackQuery):
    await call.message.edit_text(
        "üìä <b>–ê—Ä–±–∏—Ç—Ä–∞–∂</b>

"
        "üîé –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
"
        "–æ —Å–¥–µ–ª–∫–∞—Ö –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±–∏—Ä–∂–µ (Bybit).
",
        reply_markup=arbitrage_menu,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "set_filter")
async def send_filter_instruction(call: CallbackQuery):
    await call.message.answer("–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
<code>/filter</code>", parse_mode="HTML")

@router.callback_query(F.data == "rates")
async def show_rates(call: CallbackQuery):
    await call.message.edit_text(
        "üìà –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã.",
        reply_markup=back_menu
    )

@router.callback_query(F.data == "settings")
async def show_settings(call: CallbackQuery):
    await call.message.edit_text(
        "‚öôÔ∏è –†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        reply_markup=back_menu
    )

@router.callback_query(F.data == "pro")
async def show_pro_info(call: CallbackQuery):
    await call.message.edit_text(
        "üíé <b>PRO-—Ñ—É–Ω–∫—Ü–∏–∏</b> —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã!

"
        "üîì –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä–æ–µ—Ç –¥–æ—Å—Ç—É–ø –∫:
"
        "‚Ä¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É –ø—Ä–∏–±—ã–ª–∏
"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
"
        "‚Ä¢ –ê—Ä—Ö–∏–≤—É —Ç–æ–ø-—Å–¥–µ–ª–æ–∫
"
        "‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∏ –±–æ–Ω—É—Å–∞–º
",
        reply_markup=back_menu,
        parse_mode="HTML"
    )

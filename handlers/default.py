from aiogram import Router, types
from aiogram.filters.command import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession

from config.db import AsyncSessionLocal
from models.user_setting import UserSetting

router = Router()

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
class BotStates(StatesGroup):
    exchange = State()
    buy = State()
    sell = State()
    calc = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
MAIN_INLINE = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="show_settings"),
        InlineKeyboardButton(text="üè∑ –ë–∏—Ä–∂–∞", callback_data="set_exchange")
    ],
    [
        InlineKeyboardButton(text="üìà BUY", callback_data="set_buy"),
        InlineKeyboardButton(text="üìâ SELL", callback_data="set_sell")
    ],
    [InlineKeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="set_calc")],
    [
        InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="show_history"),
        InlineKeyboardButton(text="üî• –¢–æ–ø-—Å–¥–µ–ª–∫–∏", callback_data="show_top")
    ],
])

async def get_or_create_setting(session: AsyncSession, user_id: int) -> UserSetting:
    setting = await session.get(UserSetting, user_id)
    if not setting:
        setting = UserSetting(user_id=user_id)
        session.add(setting)
        await session.commit()
        await session.refresh(setting)
    return setting

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ArbitPRO! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=MAIN_INLINE
    )

@router.callback_query(lambda c: c.data == "show_settings")
async def cb_show_settings(c: CallbackQuery):
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, c.from_user.id)
    text = (
        f"üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"‚Ä¢ –ë–∏—Ä–∂–∞: {st.exchange}\n"
        f"‚Ä¢ BUY ‚â§ {st.buy_threshold or '-'}\n"
        f"‚Ä¢ SELL ‚â• {st.sell_threshold or '-'}"
    )
    await c.message.edit_text(text, reply_markup=MAIN_INLINE)
    await c.answer()

@router.callback_query(lambda c: c.data == "set_exchange")
async def cb_set_exchange(c: CallbackQuery, state: FSMContext):
    await state.set_state(BotStates.exchange)
    await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –±–∏—Ä–∂—É (binance, bybit –∏–ª–∏ bitget):")
    await c.answer()

@router.message(BotStates.exchange)
async def process_exchange(message: Message, state: FSMContext):
    exch = message.text.lower()
    if exch not in ("binance", "bybit", "bitget"):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –±–∏—Ä–∂–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
        st.exchange = exch
        await session.commit()
    await state.clear()
    await message.answer(f"‚úÖ –ë–∏—Ä–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {exch}", reply_markup=MAIN_INLINE)

@router.callback_query(lambda c: c.data == "set_buy")
async def cb_set_buy(c: CallbackQuery, state: FSMContext):
    await state.set_state(BotStates.buy)
    await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ BUY-–ø–æ—Ä–æ–≥ (—á–∏—Å–ª–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä: 41.20")
    await c.answer()

@router.message(BotStates.buy)
async def process_buy(message: Message, state: FSMContext):
    try:
        val = float(message.text)
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
        st.buy_threshold = val
        await session.commit()
    await state.clear()
    await message.answer(f"‚úÖ BUY-–ø–æ—Ä–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ‚â§ {val}", reply_markup=MAIN_INLINE)

@router.callback_query(lambda c: c.data == "set_sell")
async def cb_set_sell(c: CallbackQuery, state: FSMContext):
    await state.set_state(BotStates.sell)
    await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ SELL-–ø–æ—Ä–æ–≥ (—á–∏—Å–ª–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä: 42.50")
    await c.answer()

@router.message(BotStates.sell)
async def process_sell(message: Message, state: FSMContext):
    try:
        val = float(message.text)
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
        st.sell_threshold = val
        await session.commit()
    await state.clear()
    await message.answer(f"‚úÖ SELL-–ø–æ—Ä–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ‚â• {val}", reply_markup=MAIN_INLINE)

@router.callback_query(lambda c: c.data == "set_calc")
async def cb_set_calc(c: CallbackQuery, state: FSMContext):
    await state.set_state(BotStates.calc)
    await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ: amount buy_price sell_price, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100 41.20 42.50")
    await c.answer()

@router.message(BotStates.calc)
async def process_calc(message: Message, state: FSMContext):
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.", reply_markup=MAIN_INLINE)
        return
    try:
        amount, buy_p, sell_p = map(float, parts)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞.", reply_markup=MAIN_INLINE)
        return
    profit = amount * (sell_p - buy_p)
    await state.clear()
    await message.answer(f"üí∞ –ü—Ä–∏–±—ã–ª—å: {profit:.2f}‚Ç¥", reply_markup=MAIN_INLINE)

@router.callback_query(lambda c: c.data == "show_history")
async def cb_show_history(c: CallbackQuery):
    await c.message.edit_text("üïë –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫: (–∑–∞–≥–ª—É—à–∫–∞)", reply_markup=MAIN_INLINE)
    await c.answer()

@router.callback_query(lambda c: c.data == "show_top")
async def cb_show_top(c: CallbackQuery):
    await c.message.edit_text("üèÜ –¢–æ–ø-—Å–¥–µ–ª–∫–∏: (–∑–∞–≥–ª—É—à–∫–∞)", reply_markup=MAIN_INLINE)
    await c.answer()

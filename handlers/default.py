from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardRemove,
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from config.db import AsyncSessionLocal
from models.user_setting import UserSetting

router = Router()

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–æ–≤
class ConfigStates(StatesGroup):
    waiting_buy = State()
    waiting_sell = State()
    waiting_exchange = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî Inline
MAIN_MENU = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")],
    [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_show")],
])

# –ü–æ–¥–º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
SETTINGS_MENU = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìà –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å BUY-–ø–æ—Ä–æ–≥", callback_data="set_buy")],
    [InlineKeyboardButton(text="üìâ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SELL-–ø–æ—Ä–æ–≥", callback_data="set_sell")],
    [InlineKeyboardButton(text="üè∑ –í—ã–±—Ä–∞—Ç—å –±–∏—Ä–∂—É", callback_data="set_exchange")],
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")],
])

async def get_setting(session: AsyncSession, user_id: int) -> UserSetting:
    setting = await session.get(UserSetting, user_id)
    if not setting:
        setting = UserSetting(user_id=user_id)
        session.add(setting)
        await session.commit()
        await session.refresh(setting)
    return setting

@router.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ArbitPRO!\n\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞—Ä–±–∏—Ç—Ä–∞–∂–µ.",
        reply_markup=MAIN_MENU
    )

@router.callback_query(lambda c: c.data == "menu_show")
async def show_settings(c: types.CallbackQuery):
    async with AsyncSessionLocal() as session:
        setting = await get_setting(session, c.from_user.id)
    await c.message.edit_text(
        f"üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"‚Ä¢ –ë–∏—Ä–∂–∞: <b>{setting.exchange}</b>\n"
        f"‚Ä¢ Buy ‚â§ <b>{setting.buy_threshold or '‚Äî'}</b>\n"
        f"‚Ä¢ Sell ‚â• <b>{setting.sell_threshold or '‚Äî'}</b>",
        parse_mode="HTML",
        reply_markup=MAIN_MENU
    )
    await c.answer()

@router.callback_query(lambda c: c.data == "menu_settings")
async def menu_settings(c: types.CallbackQuery):
    await c.message.edit_text("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=SETTINGS_MENU)
    await c.answer()

@router.callback_query(lambda c: c.data == "back_main")
async def back_main(c: types.CallbackQuery):
    await c.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=MAIN_MENU)
    await c.answer()

@router.callback_query(lambda c: c.data == "set_buy")
async def callback_set_buy(c: types.CallbackQuery, state: FSMContext):
    await c.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π BUY-–ø–æ—Ä–æ–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 41.20):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(ConfigStates.waiting_buy)
    await c.answer()

@router.callback_query(lambda c: c.data == "set_sell")
async def callback_set_sell(c: types.CallbackQuery, state: FSMContext):
    await c.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π SELL-–ø–æ—Ä–æ–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 42.50):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(ConfigStates.waiting_sell)
    await c.answer()

@router.callback_query(lambda c: c.data == "set_exchange")
async def callback_set_exchange(c: types.CallbackQuery, state: FSMContext):
    await c.message.answer("–í–≤–µ–¥–∏—Ç–µ –±–∏—Ä–∂—É (binance, bybit –∏–ª–∏ bitget):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(ConfigStates.waiting_exchange)
    await c.answer()

@router.message(ConfigStates.waiting_buy)
async def process_buy(message: types.Message, state: FSMContext):
    try:
        val = float(message.text)
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 41.20")
    async with AsyncSessionLocal() as session:
        setting = await get_setting(session, message.from_user.id)
        setting.buy_threshold = val
        await session.commit()
    await message.answer(f"‚úÖ BUY-–ø–æ—Ä–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ‚â§ {val}", reply_markup=MAIN_MENU)
    await state.clear()

@router.message(ConfigStates.waiting_sell)
async def process_sell(message: types.Message, state: FSMContext):
    try:
        val = float(message.text)
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 42.50")
    async with AsyncSessionLocal() as session:
        setting = await get_setting(session, message.from_user.id)
        setting.sell_threshold = val
        await session.commit()
    await message.answer(f"‚úÖ SELL-–ø–æ—Ä–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ‚â• {val}", reply_markup=MAIN_MENU)
    await state.clear()

@router.message(ConfigStates.waiting_exchange)
async def process_exchange(message: types.Message, state: FSMContext):
    exch = message.text.lower()
    if exch not in ("binance", "bybit", "bitget"):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –±–∏—Ä–∂–∞, –≤–≤–µ–¥–∏—Ç–µ: binance, bybit –∏–ª–∏ bitget")
    async with AsyncSessionLocal() as session:
        setting = await get_setting(session, message.from_user.id)
        setting.exchange = exch
        await session.commit()
    await message.answer(f"‚úÖ –ë–∏—Ä–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {exch}", reply_markup=MAIN_MENU)
    await state.clear()

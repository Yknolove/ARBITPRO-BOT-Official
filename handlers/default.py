from aiogram import Router, types
from aiogram.filters.command import Command
from aiogram.fsm.state import State
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from sqlalchemy.ext.asyncio import AsyncSession

from config.db import AsyncSessionLocal
from models.user_setting import UserSetting

router = Router()

class BotStates(StatesGroup):
    exchange = State()
    buy = State()
    sell = State()
    calc = State()

MAIN_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")],
        [KeyboardButton(text="üè∑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏—Ä–∂—É"), KeyboardButton(text="üìà BUY"), KeyboardButton(text="üìâ SELL")],
        [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton(text="üî• –¢–æ–ø-—Å–¥–µ–ª–∫–∏")],
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

async def get_or_create_setting(session: AsyncSession, user_id: int) -> UserSetting:
    setting = await session.get(UserSetting, user_id)
    if not setting:
        setting = UserSetting(user_id=user_id)
        session.add(setting)
        await session.commit()
        await session.refresh(setting)
    return setting

@router.message(Command(commands=["start"]))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ArbitPRO! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=MAIN_KB)

@router.message(lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: types.Message, state: FSMContext):
    await state.clear()
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
    await message.answer(
        f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n–ë–∏—Ä–∂–∞: {st.exchange}\nBUY ‚â§ {st.buy_threshold or '-'}\nSELL ‚â• {st.sell_threshold or '-'}",
        reply_markup=MAIN_KB
    )

@router.message(lambda message: message.text == "üè∑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏—Ä–∂—É")
async def set_exchange_start(message: types.Message, state: FSMContext):
    await state.set_state(BotStates.exchange)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –±–∏—Ä–∂—É (binance, bybit –∏–ª–∏ bitget):", reply_markup=ReplyKeyboardRemove())

@router.message(BotStates.exchange)
async def process_exchange(message: types.Message, state: FSMContext):
    exch = message.text.lower()
    if exch not in ("binance", "bybit", "bitget"):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –±–∏—Ä–∂–∞. –í–≤–µ–¥–∏—Ç–µ: binance, bybit –∏–ª–∏ bitget.")
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
        st.exchange = exch
        await session.commit()
    await state.clear()
    await message.answer(f"‚úÖ –ë–∏—Ä–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {exch}", reply_markup=MAIN_KB)

@router.message(lambda message: message.text == "üìà BUY")
async def set_buy_start(message: types.Message, state: FSMContext):
    await state.set_state(BotStates.buy)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ BUY-–ø–æ—Ä–æ–≥ (—á–∏—Å–ª–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä: 41.20", reply_markup=ReplyKeyboardRemove())

@router.message(BotStates.buy)
async def process_buy(message: types.Message, state: FSMContext):
    try:
        val = float(message.text)
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: 41.20.")
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
        st.buy_threshold = val
        await session.commit()
    await state.clear()
    await message.answer(f"‚úÖ BUY-–ø–æ—Ä–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ‚â§ {val}", reply_markup=MAIN_KB)

@router.message(lambda message: message.text == "üìâ SELL")
async def set_sell_start(message: types.Message, state: FSMContext):
    await state.set_state(BotStates.sell)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ SELL-–ø–æ—Ä–æ–≥ (—á–∏—Å–ª–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä: 42.50", reply_markup=ReplyKeyboardRemove())

@router.message(BotStates.sell)
async def process_sell(message: types.Message, state: FSMContext):
    try:
        val = float(message.text)
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: 42.50.")
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
        st.sell_threshold = val
        await session.commit()
    await state.clear()
    await message.answer(f"‚úÖ SELL-–ø–æ—Ä–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ‚â• {val}", reply_markup=MAIN_KB)

@router.message(lambda message: message.text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def set_calc_start(message: types.Message, state: FSMContext):
    await state.set_state(BotStates.calc)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ: —Å—É–º–º–∞ buy_price sell_price, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100 41.20 42.50", reply_markup=ReplyKeyboardRemove())

@router.message(BotStates.calc)
async def process_calc(message: types.Message, state: FSMContext):
    parts = message.text.split()
    if len(parts) != 3:
        return await message.answer("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.", reply_markup=MAIN_KB)
    try:
        amount, buy_p, sell_p = map(float, parts)
    except ValueError:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100 41.20 42.50.", reply_markup=MAIN_KB)
    profit = amount * (sell_p - buy_p)
    await state.clear()
    await message.answer(f"üí∞ –ü—Ä–∏–±—ã–ª—å: {profit:.2f}‚Ç¥", reply_markup=MAIN_KB)

@router.message(lambda message: message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def text_history(message: types.Message):
    await message.answer("üïë –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫: (–∑–∞–≥–ª—É—à–∫–∞)", reply_markup=MAIN_KB)

@router.message(lambda message: message.text == "üî• –¢–æ–ø-—Å–¥–µ–ª–∫–∏")
async def text_top(message: types.Message):
    await message.answer("üèÜ –¢–æ–ø-—Å–¥–µ–ª–∫–∏: (–∑–∞–≥–ª—É—à–∫–∞)", reply_markup=MAIN_KB)


from aiogram import Router, types
from aiogram.filters.command import Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from sqlalchemy.ext.asyncio import AsyncSession

from config.db import AsyncSessionLocal
from models.user_setting import UserSetting

router = Router()

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
class CalcStates(StatesGroup):
    waiting_input = State()

# –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ–Ω—é —Å–Ω–∏–∑—É
MAIN_KB = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            KeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"),
        ],
        [
            KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è"),
            KeyboardButton(text="üî• –¢–æ–ø-—Å–¥–µ–ª–∫–∏"),
        ],
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

async def get_or_create_setting(session: AsyncSession, user_id: int) -> UserSetting:
    setting = await session.get(UserSetting, user_id)
    if not setting:
        setting = UserSetting(user_id=user_id)
        session.add(setting)
        await session.commit()
        await session.refresh(setting)
    return setting

@router.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ArbitPRO!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=MAIN_KB
    )

@router.message(lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def text_settings(message: types.Message):
    async with AsyncSessionLocal() as session:
        setting = await get_or_create_setting(session, message.from_user.id)
    await message.answer(
        "üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"‚Ä¢ –ë–∏—Ä–∂–∞: <b>{setting.exchange}</b>\n"
        f"‚Ä¢ Buy ‚â§ <b>{setting.buy_threshold or '‚Äî'}</b>\n"
        f"‚Ä¢ Sell ‚â• <b>{setting.sell_threshold or '‚Äî'}</b>",
        parse_mode="HTML",
        reply_markup=MAIN_KB
    )

@router.message(lambda message: message.text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def text_calculator(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: —Å—É–º–º–∞ buy_price sell_price\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>100 41.20 42.50</code>",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(CalcStates.waiting_input)

@router.message(StateFilter(CalcStates.waiting_input))
async def calc_input(message: types.Message, state: FSMContext):
    parts = message.text.split()
    if len(parts) != 3:
        return await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100 41.20 42.50",
            reply_markup=ReplyKeyboardRemove()
        )
    try:
        amount, buy_p, sell_p = map(float, parts)
    except ValueError:
        return await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100 41.20 42.50",
            reply_markup=ReplyKeyboardRemove()
        )
    profit = amount * (sell_p - buy_p)
    await message.answer(
        f"üí∞ –ü—Ä–∏–±—ã–ª—å: {amount}√ó({sell_p}‚àí{buy_p}) = <b>{profit:.2f}‚Ç¥</b>",
        parse_mode="HTML",
        reply_markup=MAIN_KB
    )
    await state.clear()

@router.message(lambda message: message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def text_history(message: types.Message):
    await message.answer(
        "üïë –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫:\n(–ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)",
        reply_markup=MAIN_KB
    )

@router.message(lambda message: message.text == "üî• –¢–æ–ø-—Å–¥–µ–ª–∫–∏")
async def text_top(message: types.Message):
    await message.answer(
        "üèÜ –¢–æ–ø-—Å–¥–µ–ª–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n(–ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)",
        reply_markup=MAIN_KB
    )

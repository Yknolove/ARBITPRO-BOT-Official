from aiogram import Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, CallbackQuery
from services.aggregator import start_monitoring  # –ø—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üÜì Free Version", callback_data="free")],
        [InlineKeyboardButton("üîí Pro Version", callback_data="pro")],
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é:", reply_markup=kb)

@router.callback_query(CallbackQuery.filter(lambda c: c.data in ["free", "pro"]))
async def cb_version(cq: CallbackQuery):
    if cq.data == "free":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("üìä –í—ã–±—Ä–∞—Ç—å –±–∏—Ä–∂—É", callback_data="choose_exchange")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")],
        ])
        await cq.message.edit_text(
            "Free –≤–µ—Ä—Å–∏—è: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–¥–Ω–æ–π P2P‚Äë–±–∏—Ä–∂–∏.\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏—Ä–∂–∏: Binance, Bybit, OKX, Bitget.",
            reply_markup=kb
        )
    else:
        await cq.answer("Pro –≤–µ—Ä—Å–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)

@router.callback_query(CallbackQuery.filter(lambda c: c.data == "choose_exchange"))
async def cb_choose_exchange(cq: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(x, callback_data=f"exch_{x.lower()}")] for x in ["Binance","Bybit","OKX","Bitget"]
    ])
    await cq.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", reply_markup=kb)

# –ü—Ä–∏–º–µ—Ä –∫–Ω–æ–ø–∫–∏ 'refresh'
@router.callback_query(CallbackQuery.filter(lambda c: c.data == "refresh"))
async def cb_refresh(cq: CallbackQuery):
    await start_monitoring(cq.from_user.id)  # –ø—Ä–∏–º–µ—Ä: –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await cq.answer("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ")

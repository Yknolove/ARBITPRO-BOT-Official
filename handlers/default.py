from aiogram import Router, types
from aiogram.filters import Command, CommandObject
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession

from config.db import AsyncSessionLocal
from models.user_setting import UserSetting

router = Router()

# –≥–æ—Ç–æ–≤–∏–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–Ω–∏–∑—É
MAIN_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("/settings"), KeyboardButton("/start")],
    ],
    resize_keyboard=True
)

async def get_setting(session: AsyncSession, user_id: int):
    setting = await session.get(UserSetting, user_id)
    if not setting:
        setting = UserSetting(user_id=user_id)
        session.add(setting)
        await session.commit()
        await session.refresh(setting)
    return setting

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ArbitPRO Bot.\n"
        "–í –±–∞–∑–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ —è –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é P2P-–∞—Ä–±–∏—Ç—Ä–∞–∂ USDT –º–µ–∂–¥—É Binance, Bybit –∏ Bitget.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /settings –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–æ–≤.",
        reply_markup=MAIN_KB
    )

@router.message(Command("settings"))
async def cmd_settings(message: types.Message):
    async with AsyncSessionLocal() as session:
        setting = await get_setting(session, message.from_user.id)

    text = (
        "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"‚Ä¢ –ë–∏—Ä–∂–∞: <b>{setting.exchange}</b>\n"
        f"‚Ä¢ Buy ‚â§ <b>{setting.buy_threshold or '–Ω–µ –∑–∞–¥–∞–Ω'}</b>\n"
        f"‚Ä¢ Sell ‚â• <b>{setting.sell_threshold or '–Ω–µ –∑–∞–¥–∞–Ω'}</b>\n\n"
        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:\n"
        "<code>/set_exchange binance</code> ‚Äî –≤—ã–±—Ä–∞—Ç—å –±–∏—Ä–∂—É\n"
        "<code>/set_buy 41.20</code> ‚Äî –∑–∞–¥–∞—Ç—å –ø–æ—Ä–æ–≥ –ø–æ–∫—É–ø–∫–∏\n"
        "<code>/set_sell 42.50</code> ‚Äî –∑–∞–¥–∞—Ç—å –ø–æ—Ä–æ–≥ –ø—Ä–æ–¥–∞–∂–∏"
    )
    await message.answer(text, reply_markup=MAIN_KB)

@router.message(Command("set_exchange"))
async def cmd_set_exchange(message: types.Message, command: CommandObject):
    exch = command.args.lower()
    if exch not in ("binance", "bybit", "bitget"):
        return await message.answer(
            "–ù–µ–≤–µ—Ä–Ω–∞—è –±–∏—Ä–∂–∞. –í—ã–±–µ—Ä–∏—Ç–µ: binance, bybit –∏–ª–∏ bitget.",
            reply_markup=MAIN_KB
        )
    async with AsyncSessionLocal() as session:
        setting = await get_setting(session, message.from_user.id)
        setting.exchange = exch
        await session.commit()
    await message.answer(f"–ë–∏—Ä–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ <b>{exch}</b>.", reply_markup=MAIN_KB)

@router.message(Command("set_buy"))
async def cmd_set_buy(message: types.Message, command: CommandObject):
    try:
        val = float(command.args)
    except ValueError:
        return await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /set_buy 41.20",
            reply_markup=MAIN_KB
        )
    async with AsyncSessionLocal() as session:
        setting = await get_setting(session, message.from_user.id)
        setting.buy_threshold = val
        await session.commit()
    await message.answer(f"–ü–æ—Ä–æ–≥ –ø–æ–∫—É–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ‚â§ <b>{val}‚Ç¥</b>.", reply_markup=MAIN_KB)

@router.message(Command("set_sell"))
async def cmd_set_sell(message: types.Message, command: CommandObject):
    try:
        val = float(command.args)
    except ValueError:
        return await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /set_sell 42.50",
            reply_markup=MAIN_KB
        )
    async with AsyncSessionLocal() as session:
        setting = await get_setting(session, message.from_user.id)
        setting.sell_threshold = val
        await session.commit()
    await message.answer(f"–ü–æ—Ä–æ–≥ –ø—Ä–æ–¥–∞–∂–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ‚â• <b>{val}‚Ç¥</b>.", reply_markup=MAIN_KB)

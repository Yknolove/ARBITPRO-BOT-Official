from aiogram import Router
from aiogram.filters.command import Command
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    Message, CallbackQuery
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from config.db import AsyncSessionLocal
from models.user_setting import UserSetting

# –†–µ–≥–∏—Å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–Ω—é: chat_id -> message_id
menu_registry: dict[int, int] = {}

router = Router()

class FreeSettingsStates(StatesGroup):
    exchange = State()
    buy = State()
    sell = State()
    volume = State()

def version_menu() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("üÜì Free Version", callback_data="version:free"),
        InlineKeyboardButton("üíé Pro Version", callback_data="version:pro")
    )
    return kb

def free_menu() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("üè∑ –ë–∏—Ä–∂–∞", callback_data="free:exchange"),
        InlineKeyboardButton("üìà BUY ‚â§ ...", callback_data="free:buy"),
        InlineKeyboardButton("üìâ SELL ‚â• ...", callback_data="free:sell"),
        InlineKeyboardButton("üî¢ –õ–∏–º–∏—Ç", callback_data="free:volume"),
        InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="free:show"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="version:main")
    )
    return kb

async def get_or_create_setting(session: AsyncSession, user_id: int) -> UserSetting:
    st = await session.get(UserSetting, user_id)
    if not st:
        st = UserSetting(user_id=user_id)
        session.add(st)
        await session.commit()
        await session.refresh(st)
    return st

@router.message(Command("start"))
async def cmd_start(message: Message):
    sent = await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ArbitPRO!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é:",
        reply_markup=version_menu()
    )
    menu_registry[sent.chat.id] = sent.message_id

@router.callback_query(lambda c: c.data.startswith("version:"))
async def cb_version(c: CallbackQuery, state: FSMContext):
    action = c.data.split(":", 1)[1]
    if action == "main":
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é:"
        kb = version_menu()
    elif action == "free":
        text = "üÜì Free Version Menu:\n‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏ P2P\n‚Ä¢ BUY/SELL –ø–æ—Ä–æ–≥–∏\n‚Ä¢ –õ–∏–º–∏—Ç –æ–±—ä—ë–º–∞"
        kb = free_menu()
    else:
        await c.answer("Pro –≤–µ—Ä—Å–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!", show_alert=True)
        return

    sent = await c.message.edit_text(text, reply_markup=kb)
    menu_registry[sent.chat.id] = sent.message_id
    await c.answer()

@router.callback_query(lambda c: c.data.startswith("free:"))
async def cb_free(c: CallbackQuery, state: FSMContext):
    action = c.data.split(":", 1)[1]
    if action == "exchange":
        await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –±–∏—Ä–∂—É (binance, bybit, okx, bitget):")
        await state.set_state(FreeSettingsStates.exchange)
    elif action == "buy":
        await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ BUY-–ø–æ—Ä–æ–≥ (—á–∏—Å–ª–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä: 41.20:")
        await state.set_state(FreeSettingsStates.buy)
    elif action == "sell":
        await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ SELL-–ø–æ—Ä–æ–≥ (—á–∏—Å–ª–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä: 42.50:")
        await state.set_state(FreeSettingsStates.sell)
    elif action == "volume":
        await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –æ–±—ä—ë–º–∞ (—á–∏—Å–ª–æ –¥–æ–ª–ª–∞—Ä–æ–≤):")
        await state.set_state(FreeSettingsStates.volume)
    elif action == "show":
        async with AsyncSessionLocal() as session:
            st = await get_or_create_setting(session, c.from_user.id)
        text = (
            f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Free Version:\n"
            f"–ë–∏—Ä–∂–∞: {st.exchange}\n"
            f"BUY ‚â§ {st.buy_threshold or '-'}\n"
            f"SELL ‚â• {st.sell_threshold or '-'}\n"
            f"–û–±—ä—ë–º ‚â§ ${st.volume_limit or '-'}"
        )
        sent = await c.message.edit_text(text, reply_markup=free_menu())
        menu_registry[sent.chat.id] = sent.message_id
    elif action == "main":
        sent = await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é:", reply_markup=version_menu())
        menu_registry[sent.chat.id] = sent.message_id

    await c.answer()

@router.message(FreeSettingsStates.exchange)
async def process_exchange(message: Message, state: FSMContext):
    exch = message.text.lower()
    if exch not in ("binance","bybit","okx","bitget"):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –±–∏—Ä–∂–∞.")
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
        st.exchange = exch
        await session.commit()
    await state.clear()
    sent = await message.answer(f"‚úÖ –ë–∏—Ä–∂–∞: {exch}", reply_markup=free_menu())
    menu_registry[sent.chat.id] = sent.message_id

@router.message(FreeSettingsStates.buy)
async def process_buy(message: Message, state: FSMContext):
    try:
        val = float(message.text)
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
        st.buy_threshold = val
        await session.commit()
    await state.clear()
    sent = await message.answer(f"‚úÖ BUY ‚â§ {val}", reply_markup=free_menu())
    menu_registry[sent.chat.id] = sent.message_id

@router.message(FreeSettingsStates.sell)
async def process_sell(message: Message, state: FSMContext):
    try:
        val = float(message.text)
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
        st.sell_threshold = val
        await session.commit()
    await state.clear()
    sent = await message.answer(f"‚úÖ SELL ‚â• {val}", reply_markup=free_menu())
    menu_registry[sent.chat.id] = sent.message_id

@router.message(FreeSettingsStates.volume)
async def process_volume(message: Message, state: FSMContext):
    try:
        val = float(message.text)
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
        st.volume_limit = val
        await session.commit()
    await state.clear()
    sent = await message.answer(f"‚úÖ –û–±—ä—ë–º ‚â§ ${val}", reply_markup=free_menu())
    menu_registry[sent.chat.id] = sent.message_id

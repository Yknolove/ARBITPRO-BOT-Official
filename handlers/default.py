from aiogram import Router
from aiogram.filters.text import Text
from aiogram.filters.command import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    Message, ReplyKeyboardRemove
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from config.db import AsyncSessionLocal
from models.user_setting import UserSetting

router = Router()

class FreeSettingsStates(StatesGroup):
    exchange = State()
    buy      = State()
    sell     = State()
    volume   = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üÜì Free Version")],
        [KeyboardButton(text="üíé Pro Version")],
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

# –ú–µ–Ω—é Free-–≤–µ—Ä—Å–∏–∏
free_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üè∑ –ë–∏—Ä–∂–∞"), KeyboardButton(text="üìà BUY")],
        [KeyboardButton(text="üìâ SELL"),  KeyboardButton(text="üî¢ –õ–∏–º–∏—Ç")],
        [KeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

async def get_or_create_setting(session: AsyncSession, user_id: int) -> UserSetting:
    st = await session.get(UserSetting, user_id)
    if not st:
        st = UserSetting(user_id=user_id)
        session.add(st)
        await session.commit()
        await session.refresh(st)
    return st

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ArbitPRO!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é:",
        reply_markup=main_kb
    )

@router.message(Text(equals="üÜì Free Version"))
async def enter_free(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üÜì Free Version Menu:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=free_kb
    )

@router.message(Text(equals="üíé Pro Version"))
async def enter_pro(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üíé Pro –≤–µ—Ä—Å–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!",
        reply_markup=main_kb
    )

@router.message(Text(equals="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
async def back_main(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_kb
    )

@router.message(Text(equals="üè∑ –ë–∏—Ä–∂–∞"))
async def set_exchange_prompt(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –±–∏—Ä–∂—É (binance, bybit, okx, bitget):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(FreeSettingsStates.exchange)

@router.message(FreeSettingsStates.exchange)
async def process_exchange(message: Message, state: FSMContext):
    exch = message.text.lower()
    if exch not in ("binance", "bybit", "okx", "bitget"):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –±–∏—Ä–∂–∞.")
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
        st.exchange = exch
        await session.commit()
    await state.clear()
    await message.answer(f"‚úÖ –ë–∏—Ä–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {exch}", reply_markup=free_kb)

@router.message(Text(equals="üìà BUY"))
async def set_buy_prompt(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ BUY-–ø–æ—Ä–æ–≥ (—á–∏—Å–ª–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä: 41.20:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(FreeSettingsStates.buy)

@router.message(FreeSettingsStates.buy)
async def process_buy(message: Message, state: FSMContext):
    try:
        val = float(message.text)
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
        st.buy_threshold = val
        await session.commit()
    await state.clear()
    await message.answer(f"‚úÖ BUY ‚â§ {val}", reply_markup=free_kb)

@router.message(Text(equals="üìâ SELL"))
async def set_sell_prompt(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ SELL-–ø–æ—Ä–æ–≥ (—á–∏—Å–ª–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä: 42.50:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(FreeSettingsStates.sell)

@router.message(FreeSettingsStates.sell)
async def process_sell(message: Message, state: FSMContext):
    try:
        val = float(message.text)
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
        st.sell_threshold = val
        await session.commit()
    await state.clear()
    await message.answer(f"‚úÖ SELL ‚â• {val}", reply_markup=free_kb)

@router.message(Text(equals="üî¢ –õ–∏–º–∏—Ç"))
async def set_volume_prompt(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –æ–±—ä—ë–º–∞ (—á–∏—Å–ª–æ –¥–æ–ª–ª–∞—Ä–æ–≤):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(FreeSettingsStates.volume)

@router.message(FreeSettingsStates.volume)
async def process_volume(message: Message, state: FSMContext):
    try:
        val = float(message.text)
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
        st.volume_limit = val
        await session.commit()
    await state.clear()
    await message.answer(f"‚úÖ –û–±—ä—ë–º ‚â§ ${val}", reply_markup=free_kb)

@router.message(Text(equals="üìä –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"))
async def show_settings(message: Message, state: FSMContext):
    await state.clear()
    async with AsyncSessionLocal() as session:
        st = await get_or_create_setting(session, message.from_user.id)
    await message.answer(
        f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Free Version:\n"
        f"–ë–∏—Ä–∂–∞: {st.exchange}\n"
        f"BUY ‚â§ {st.buy_threshold or '-'}\n"
        f"SELL ‚â• {st.sell_threshold or '-'}\n"
        f"–û–±—ä—ë–º ‚â§ ${st.volume_limit or '-'}",
        reply_markup=free_kb
    )

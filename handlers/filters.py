import json
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

router = Router()
FILTERS_PATH = "filters.json"

class FilterStates(StatesGroup):
    choosing_buy_price = State()
    choosing_sell_price = State()
    choosing_volume = State()

@router.message(F.text == "/filter")
async def start_filter_setup(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 41.00):")
    await state.set_state(FilterStates.choosing_buy_price)

@router.message(FilterStates.choosing_buy_price)
async def set_buy_price(message: Message, state: FSMContext):
    try:
        buy_price = float(message.text)
        await state.update_data(buy_price=buy_price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 43.00):")
        await state.set_state(FilterStates.choosing_sell_price)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@router.message(FilterStates.choosing_sell_price)
async def set_sell_price(message: Message, state: FSMContext):
    try:
        sell_price = float(message.text)
        await state.update_data(sell_price=sell_price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º —Å–¥–µ–ª–∫–∏ (–¥–æ 100$ –¥–ª—è Free):")
        await state.set_state(FilterStates.choosing_volume)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@router.message(FilterStates.choosing_volume)
async def save_filter(message: Message, state: FSMContext):
    try:
        volume = float(message.text)
        if volume > 100:
            await message.answer("üö´ –í Free-–≤–µ—Ä—Å–∏–∏ –º–∞–∫—Å–∏–º—É–º 100$. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ 100:")
            return
        data = await state.get_data()
        data.update({
            "volume": volume,
            "chat_id": message.chat.id,
            "exchange": "bybit"
        })

        try:
            with open(FILTERS_PATH, "r") as f:
                all_filters = json.load(f)
        except:
            all_filters = {}

        all_filters[str(message.chat.id)] = data
        with open(FILTERS_PATH, "w") as f:
            json.dump(all_filters, f)

        await message.answer(
            f"‚úÖ –§–∏–ª—å—Ç—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n"
            f"–ë–∏—Ä–∂–∞: Bybit\n"
            f"–ü–æ–∫—É–ø–∫–∞ –¥–æ: {data['buy_price']}\n"
            f"–ü—Ä–æ–¥–∞–∂–∞ –æ—Ç: {data['sell_price']}\n"
            f"–û–±—ä—ë–º –¥–æ: {data['volume']}$"
        )
        await state.clear()

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

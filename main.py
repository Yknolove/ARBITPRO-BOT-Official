# main.py
from aiogram import Bot, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio

API_TOKEN = "YOUR_TOKEN_HERE"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä Free / Pro –≤–µ—Ä—Å–∏–∏
@dp.message(commands=["start"])
async def cmd_start(message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜì Free Version", callback_data="version:free")],
        [InlineKeyboardButton(text="‚≠ê Pro Version", callback_data="version:pro")],
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é:", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
@dp.callback_query(lambda c: c.data and c.data.startswith("version:"))
async def cb_version(c: CallbackQuery):
    version = c.data.split(":")[1]
    text = "Free Version:\n‚Äî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ 1 –±–∏—Ä–∂–∏ P2P (Binance/Bybit/OKX/Bitget)\n‚Äî –ú–∏–Ω–∏–º—É–º –Ω–∞—Å—Ç—Ä–æ–µ–∫\n–ë–µ–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∏ –ª–∏–º–∏—Ç–æ–≤."
    await c.message.edit_text(text, reply_markup=free_menu_kb())
    await c.answer()

# –ú–µ–Ω—é Free‚Äë–≤–µ—Ä—Å–∏–∏
def free_menu_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="üìä –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏—Ä–∂—É", callback_data="free:set_exchange")
    builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å", callback_data="free:refresh")
    builder.adjust(1)  # 1 –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Free‚Äë–º–µ–Ω—é
@dp.callback_query(lambda c: c.data == "free:set_exchange")
async def cb_set_exchange(c: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("Binance", callback_data="exchange:binance")],
        [InlineKeyboardButton("Bybit", callback_data="exchange:bybit")],
        [InlineKeyboardButton("OKX",    callback_data="exchange:okx")],
        [InlineKeyboardButton("Bitget",callback_data="exchange:bitget")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="version:free")],
    ])
    await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", reply_markup=kb)
    await c.answer()

@dp.callback_query(lambda c: c.data.startswith("exchange:"))
async def cb_exchange(c: CallbackQuery):
    exch = c.data.split(":")[1]
    # –∑–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î/–ø–∞–º—è—Ç–∏
    await c.answer(f"–í—ã–±—Ä–∞–Ω–∞ –±–∏—Ä–∂–∞: {exch.capitalize()}")
    await c.message.edit_text(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {exch.capitalize()} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n–ò—Å–ø–æ–ª—å–∑—É–π üîÑ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞.", reply_markup=free_menu_kb())

@dp.callback_query(lambda c: c.data == "free:refresh")
async def cb_refresh(c: CallbackQuery):
    # –∑–¥–µ—Å—å <<fetch_rates>> ‚Äî —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è rate
    rate = fetch_rates_for_user(c.from_user.id)  # stub, —Ä–µ–∞–ª–∏–∑—É–π —Å–∞–º
    await c.answer("–ö—É—Ä—Å –æ–±–Ω–æ–≤–ª—ë–Ω")
    await c.message.edit_text(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {rate}", reply_markup=free_menu_kb())

# –ó–∞–≥–ª—É—à–∫–∞ ‚Äî —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ-–∏–∏
def fetch_rates_for_user(user_id):
    return "41.50 / 42.60"  # –ø—Ä–∏–º–µ—Ä

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

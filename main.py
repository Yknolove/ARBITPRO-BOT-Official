import os
import asyncio

from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.webhook.aiohttp_server import SimpleRequestHandler

# ‚Äî‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ‚Äî‚Äî
API_TOKEN   = os.getenv("API_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")     # –Ω–∞–ø—Ä–∏–º–µ—Ä https://your-app.com
WEBHOOK_PATH= os.getenv("WEBHOOK_PATH", "/webhook")
PORT        = int(os.getenv("PORT", "8000"))

if not API_TOKEN or not WEBHOOK_URL:
    raise RuntimeError("‚ùó –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ API_TOKEN –∏ WEBHOOK_URL")

# ‚Äî‚Äî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ‚Äî‚Äî
bot = Bot(token=API_TOKEN)
dp  = Dispatcher()

# ‚Äî‚Äî –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ‚Äî‚Äî
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton("üÜì Free Version", callback_data="version_free")],
            [types.InlineKeyboardButton("üîí Pro Version",  callback_data="version_pro")],
        ]
    )
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ArbitPRO!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é:",
        reply_markup=kb
    )

@dp.callback_query(lambda c: c.data in ["version_free", "version_pro"])
async def cb_version(c: types.CallbackQuery):
    if c.data == "version_free":
        text = (
            "üÜì *Free Version*\n\n"
            "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ P2P-–∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –Ω–∞ –æ–¥–Ω–æ–π –±–∏—Ä–∂–µ\n"
            "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ buy ‚â§ X, sell ‚â• Y\n"
            "‚Ä¢ –ë–µ–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏\n"
        )
    else:
        text = (
            "üîí *Pro Version*\n\n"
            "‚Ä¢ –í—Å–µ –±–∏—Ä–∂–∏, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
            "‚Ä¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫, —Ç–æ–ø-—Å–¥–µ–ª–∫–∏\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∫–∞\n"
        )
    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await c.message.edit_text(text, parse_mode="Markdown")

# ‚Äî‚Äî Webhook setup/teardown ‚Äî‚Äî
async def on_startup(app: web.Application):
    await bot.set_webhook(WEBHOOK_URL + WEBHOOK_PATH)

async def on_shutdown(app: web.Application):
    await bot.delete_webhook()
    await dp.storage.close()
    await dp.storage.wait_closed()

# ‚Äî‚Äî –°–æ–∑–¥–∞—ë–º aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤–µ—à–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä ‚Äî‚Äî
def create_app() -> web.Application:
    app = web.Application()
    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(
        app, path=WEBHOOK_PATH
    )
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    return app

# ‚Äî‚Äî –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚Äî‚Äî
if __name__ == "__main__":
    app = create_app()
    web.run_app(app, host="0.0.0.0", port=PORT)

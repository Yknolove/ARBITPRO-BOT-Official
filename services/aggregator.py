import asyncio
import aiohttp
import json
from services.rate_fetcher import RateFetcher
import logging

FILTERS_FILE = "filters.json"

async def start_aggregator(bot):
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                rf = RateFetcher(session)
                tickers = await rf.fetch_bybit()
                print(f"üü¢ Bybit –≤–µ—Ä–Ω—É–ª {len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤")

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
                try:
                    with open(FILTERS_FILE, "r") as f:
                        filters = json.load(f)
                except Exception as e:
                    logging.warning("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", exc_info=e)
                    filters = {}

                for chat_id, f in filters.items():
                    for ticker in tickers:
                        try:
                            price = float(ticker["lastPrice"])
                            volume = float(ticker.get("turnover24h", 0))

                            if (
                                price <= f["buy_price"]
                                and price >= f["sell_price"]
                                and volume <= f["volume"]
                            ):
                                msg = (
                                    f"üí∞ –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞!\n"
                                    f"–¶–µ–Ω–∞: {price}$\n"
                                    f"–û–±—ä—ë–º: {volume}$"
                                )
                                await bot.send_message(chat_id=int(chat_id), text=msg)
                        except Exception as deal_error:
                            logging.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ç–∏–∫–µ—Ä (–æ—à–∏–±–∫–∞): {deal_error}")
                            continue

        except Exception as e:
            logging.error("‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–µ", exc_info=e)

        await asyncio.sleep(15)

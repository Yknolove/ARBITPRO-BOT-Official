import os
import json
import logging
import asyncio
from aiohttp import ClientSession
from aiogram import Bot

FILTERS_FILE = "filters.json"

API_TOKEN = os.getenv("API_TOKEN")

async def fetch_bybit():
    url = "https://api.bybit.com/v5/market/tickers?category=spot"
    async with ClientSession() as session:
        async with session.get(url) as resp:
            if resp.content_type != "application/json":
                text = await resp.text()
                raise Exception(f"‚ùå –ù–µ JSON –æ—Ç–≤–µ—Ç: {resp.content_type}, —Ç–µ–∫—Å—Ç: {text}")
            data = await resp.json()
            tickers = data["result"]["list"]
            logging.info(f"üü¢ Bybit –≤–µ—Ä–Ω—É–ª {len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤")
            return tickers

def load_filters():
    try:
        with open(FILTERS_FILE, "r") as f:
            return json.load(f)
    except Exception as e:
        logging.warning("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", exc_info=e)
        return {}

async def start_aggregator():
    logging.basicConfig(level=logging.INFO)
    bot = Bot(token=API_TOKEN, parse_mode="HTML")

    while True:
        try:
            tickers = await fetch_bybit()
            filters = load_filters()
            for symbol_data in tickers:
                symbol = symbol_data["symbol"]
                ask = float(symbol_data.get("askPrice", 0))
                bid = float(symbol_data.get("bidPrice", 0))
                for chat_id, f in filters.items():
                    if f["exchange"] != "bybit":
                        continue
                    if ask <= f["buy_price"] and bid >= f["sell_price"] and float(symbol_data["volume24h"]) >= f["volume"]:
                        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ä–¥–µ—Ä: {{'symbol': '{symbol}', 'buy': {ask}, 'sell': {bid}, 'volume': {symbol_data['volume24h']}, 'chat_id': {chat_id}}}")
                        text = (
                            f"üì¢ –ù–∞–π–¥–µ–Ω –∞—Ä–±–∏—Ç—Ä–∞–∂ –ø–æ <b>{symbol}</b>:\n"
                            f"üí∞ –ü–æ–∫—É–ø–∫–∞: {ask}\n"
                            f"üíµ –ü—Ä–æ–¥–∞–∂–∞: {bid}\n"
                            f"üìä –û–±—ä—ë–º (24—á): {symbol_data['volume24h']}"
                        )
                        try:
                            await bot.send_message(chat_id=int(chat_id), text=text)
                        except Exception as send_err:
                            logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è", exc_info=send_err)
        except Exception as e:
            logging.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞", exc_info=e)

        logging.info("üîÅ –¶–∏–∫–ª –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à—ë–Ω, —Å–ø–∏–º 15 —Å–µ–∫—É–Ω–¥\n")
        await asyncio.sleep(15)

import json
import logging
import aiohttp
from aiogram import Bot
from config import API_TOKEN
from utils.filter_engine import apply_filters
from utils.const import FILTERS_FILE

async def fetch_bybit(session):
    url = "https://api.bybit.com/v5/market/tickers?category=spot"
    async with session.get(url) as resp:
        if resp.content_type != 'application/json':
            text = await resp.text()
            raise Exception(f"‚ùå –ù–µ JSON –æ—Ç–≤–µ—Ç: {resp.content_type}, —Ç–µ–∫—Å—Ç: {text}")
        data = await resp.json()
        return data["result"]["list"]

async def start_aggregator(queue, session):
    bot = Bot(token=API_TOKEN, parse_mode="HTML")

    while True:
        try:
            tickers = await fetch_bybit(session)
            logging.info(f"üü¢ Bybit –≤–µ—Ä–Ω—É–ª {len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤")

            try:
                with open(FILTERS_FILE, "r") as f:
                    filters = json.load(f)
            except Exception as e:
                logging.warning("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", exc_info=e)
                filters = {}

            orders = apply_filters(tickers, filters)

            for order in orders:
                symbol = order["symbol"]
                buy = order["buy"]
                sell = order["sell"]
                volume = order["volume"]
                chat_id = order["chat_id"]

                text = (
                    f"üì¢ –ù–∞–π–¥–µ–Ω –∞—Ä–±–∏—Ç—Ä–∞–∂ –ø–æ <b>{symbol}</b>:\n"
                    f"üîπ –ü–æ–∫—É–ø–∫–∞: <code>{buy}</code>\n"
                    f"üîπ –ü—Ä–æ–¥–∞–∂–∞: <code>{sell}</code>\n"
                    f"üîπ –û–±—ä—ë–º: <code>{volume}</code>\n\n"
                    f"üë§ –§–∏–ª—å—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                )

                await bot.send_message(chat_id=chat_id, text=text)

        except Exception as e:
            logging.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞", exc_info=e)

        logging.info("üîÅ –¶–∏–∫–ª –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à—ë–Ω, —Å–ø–∏–º 15 —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(15)

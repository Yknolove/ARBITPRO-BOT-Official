import asyncio
import aiohttp
import json
import os
import logging
from services.rate_fetcher import RateFetcher

FILTERS_FILE = "filters.json"

async def start_aggregator(bot):
    logging.info("üü¢ –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                rf = RateFetcher(session)
                tickers = await rf.fetch_bybit()
                logging.info(f"üü¢ Bybit –≤–µ—Ä–Ω—É–ª {len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤")

                if not os.path.exists(FILTERS_FILE):
                    with open(FILTERS_FILE, "w") as f:
                        json.dump({}, f)

                try:
                    with open(FILTERS_FILE, "r") as f:
                        filters = json.load(f)
                except Exception as fe:
                    logging.error("‚ùó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤", exc_info=fe)
                    filters = {}

                for chat_id, fdata in filters.items():
                    try:
                        buy_limit = float(fdata.get("buy_price", 0))
                        sell_limit = float(fdata.get("sell_price", 1000000))
                        vol_limit = float(fdata.get("volume", 1000000))
                    except:
                        continue

                    for t in tickers:
                        try:
                            price = float(t["price"])
                            vol = float(t["volume"])
                            if price <= buy_limit and price >= sell_limit and vol <= vol_limit:
                                msg = (
                                    f"üí∞ <b>–ù–∞–π–¥–µ–Ω–∞ —Å–¥–µ–ª–∫–∞</b>\n"
                                    f"<b>–¢–∏–∫–µ—Ä:</b> {t['symbol']}\n"
                                    f"<b>–¶–µ–Ω–∞:</b> {price}$\n"
                                    f"<b>–û–±—ä—ë–º:</b> {vol}$"
                                )
                                try:
                                    await bot.send_message(chat_id=int(chat_id), text=msg, parse_mode="HTML")
                                except Exception as send_err:
                                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {send_err}")
                        except:
                            continue

        except Exception as e:
            logging.error("üí• –û—à–∏–±–∫–∞ –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–µ", exc_info=e)

        logging.info("üîÅ –¶–∏–∫–ª –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à—ë–Ω, —Å–ø–∏–º 15 —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(15)

import logging
import asyncio
from aiohttp import ClientSession
from config import FILTERS_FILE
from services.filter_engine import apply_filters
from services.p2p_fetcher import P2PFetcher


async def fetch_p2p_orders(session: ClientSession):
    """Fetch buy/sell orders from supported P2P exchanges."""
    fetcher = P2PFetcher(session)
    return await fetcher.fetch_orders()


async def start_aggregator(session: ClientSession, bot):
    logging.info("üü¢ –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")

    while True:
        try:
            tickers = await fetch_p2p_orders(session)
            logging.info(f"üü¢ P2P –≤–µ—Ä–Ω—É–ª {len(tickers)} –æ—Ä–¥–µ—Ä–æ–≤")
        except Exception as e:
            logging.error("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö P2P", exc_info=e)
            await asyncio.sleep(15)
            continue

        orders = apply_filters(tickers, FILTERS_FILE)

        for order in orders:
            chat_id = order["chat_id"]
            symbol = order["symbol"]
            buy = order["buy"]
            sell = order["sell"]
            volume = order["volume"]
            url = order.get("url")

            text = (
                f"üì¢ –ù–∞–π–¥–µ–Ω –∞—Ä–±–∏—Ç—Ä–∞–∂ –ø–æ <b>{symbol}</b>:\n"
                f"üí∞ –ü–æ–∫—É–ø–∫–∞: {buy}\n"
                f"üíµ –ü—Ä–æ–¥–∞–∂–∞: {sell}\n"
                f"üì¶ –û–±—ä—ë–º: {volume}"
                + (f"\nüîó <a href='{url}'>–û—Ç–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä</a>" if url else "")
            )

            try:
                await bot.send_message(chat_id, text, parse_mode="HTML")
            except Exception as e:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}", exc_info=e)

        logging.info("üîÅ –¶–∏–∫–ª –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à—ë–Ω, —Å–ø–∏–º 15 —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(15)

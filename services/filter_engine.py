import asyncio
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram import Bot
from config.db import AsyncSessionLocal
from models.user_setting import UserSetting
from config.config import API_TOKEN

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –±–µ–∑ parse_mode (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
bot = Bot(token=API_TOKEN)

async def filter_and_notify(rates: dict):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
    async with AsyncSessionLocal() as session:  # type: AsyncSession
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ UserSetting
        result = await session.execute(
            select(UserSetting)
        )
        settings = result.scalars().all()

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for setting in settings:
        exch = setting.exchange
        buy_p = rates.get(exch, {}).get("buy")
        sell_p = rates.get(exch, {}).get("sell")
        tasks = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ –ø–æ–∫—É–ø–∫–∏
        if setting.buy_threshold is not None and buy_p is not None:
            if buy_p <= setting.buy_threshold:
                text = (
                    f"üü¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –Ω–∞ {exch.title()}!\n"
                    f"–¶–µ–Ω–∞: {buy_p}‚Ç¥ (‚â§ –≤–∞—à –ø–æ—Ä–æ–≥ {setting.buy_threshold}‚Ç¥)\n"
                    "–û–±—ä—ë–º –¥–æ $100"
                )
                tasks.append(bot.send_message(setting.user_id, text))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ –ø—Ä–æ–¥–∞–∂–∏
        if setting.sell_threshold is not None and sell_p is not None:
            if sell_p >= setting.sell_threshold:
                text = (
                    f"üî¥ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ {exch.title()}!\n"
                    f"–¶–µ–Ω–∞: {sell_p}‚Ç¥ (‚â• –≤–∞—à –ø–æ—Ä–æ–≥ {setting.sell_threshold}‚Ç¥)\n"
                    "–û–±—ä—ë–º –¥–æ $100"
                )
                tasks.append(bot.send_message(setting.user_id, text))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
        if tasks:
            asyncio.gather(*tasks)

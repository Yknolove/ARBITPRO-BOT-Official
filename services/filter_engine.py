import asyncio
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram import Bot
from config.db import AsyncSessionLocal
from models.user_setting import UserSetting
from config.config import API_TOKEN

bot = Bot(token=API_TOKEN)  # –±–µ–∑ parse_mode, –Ω–∞–º —Ç—É—Ç —Ç–æ–ª—å–∫–æ send_message

async def filter_and_notify(rates: dict):
    async with AsyncSessionLocal() as session:
        # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        result = await session.execute(
            UserSetting.__table__.select()
        )
        settings = result.scalars().all()

    for setting in settings:
        exch = setting.exchange
        buy_p = rates[exch]["buy"]
        sell_p = rates[exch]["sell"]

        tasks = []
        if setting.buy_threshold is not None and buy_p <= setting.buy_threshold:
            text = (
                f"üü¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –Ω–∞ {exch.title()}!\n"
                f"–¶–µ–Ω–∞: {buy_p}‚Ç¥ (‚â§ –≤–∞—à –ø–æ—Ä–æ–≥ {setting.buy_threshold}‚Ç¥)\n"
                f"–û–±—ä—ë–º –¥–æ $100"
            )
            tasks.append(bot.send_message(setting.user_id, text))

        if setting.sell_threshold is not None and sell_p >= setting.sell_threshold:
            text = (
                f"üî¥ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ {exch.title()}!\n"
                f"–¶–µ–Ω–∞: {sell_p}‚Ç¥ (‚â• –≤–∞—à –ø–æ—Ä–æ–≥ {setting.sell_threshold}‚Ç¥)\n"
                f"–û–±—ä—ë–º –¥–æ $100"
            )
            tasks.append(bot.send_message(setting.user_id, text))

        if tasks:
            # –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            asyncio.gather(*tasks)
